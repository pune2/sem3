	                                                                          Practicals




-----------------------------------------------------------------------------slip 1-----------------------------------------------------------------------


Q.1 Write a Java Program to implement I/O Decorator for converting uppercase letters to lower case letters.
Ans ==  import java.io.FilterInputStream;
       import java.io.IOException;
        import java.io.InputStream;

class LowerCaseInputStream extends FilterInputStream {

    public LowerCaseInputStream(InputStream in) {
        super(in);
    }

    @Override
    public int read() throws IOException {
        int c = super.read();
        if (c >= 'A' && c <= 'Z') {
            c += 32; // Convert uppercase to lowercase
        }
        return c;
    }
}

public class IODecoratorExample {
    public static void main(String[] args) {
        try {
            // Replace 'inputStream' with your desired InputStream source
            InputStream inputStream = new LowerCaseInputStream(System.in);

            int data;
            System.out.println("Enter text (Ctrl+C to exit):");

            while ((data = inputStream.read()) != -1) {
                System.out.print((char) data);
            }

            inputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



Q.2 Write a python program to transform data with Principal Component Analysis (PCA). Use handwritten digit dataset.
Ans == 

  import numpy as np
from sklearn.decomposition import PCA

# Create a sample dataset
data = np.array([
    [1, 2, 3, 4, 5],
    [2, 3, 4, 5, 6],
    [3, 4, 5, 6, 7]
])

# Initialize a PCA transformer with the number of components you want
pca = PCA(n_components=2)

# Fit the transformer to the data and transform it
transformed_data = pca.fit_transform(data)

# Display the transformed data
print("Original Data:")
print(data)
print("\nTransformed Data (2 Principal Components):")
print(transformed_data)




-----------------------------------------------------------------------------slip 2-----------------------------------------------------------------------





Q1) Write a Java Program to implement Singleton pattern for multithreading. 
Ans == 

   public class Singleton {
    // Declare the volatile instance variable to ensure visibility across threads
    private static volatile Singleton instance;

    // Private constructor to prevent instantiation from other classes
    private Singleton() {
        // Initialize the instance as needed
    }

    // Double-Checked Locking to ensure only one instance is created
    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }

    // Add other methods or attributes as needed
    public void showMessage() {
        System.out.println("Hello from Singleton!");
    }

    public static void main(String[] args) {
        // Create multiple threads to access the Singleton
        Thread thread1 = new Thread(() -> {
            Singleton singleton = Singleton.getInstance();
            singleton.showMessage();
        });

        Thread thread2 = new Thread(() -> {
            Singleton singleton = Singleton.getInstance();
            singleton.showMessage();
        });

        // Start the threads
        thread1.start();
        thread2.start();
    }
}


Q.2) Write a python program to implement simple Linear Regression for predicting house price.
Ans==

    import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Sample data: House sizes (in square feet) and their corresponding prices
house_sizes = np.array([1400, 1600, 1700, 1875, 1100, 1550, 2350, 2450, 1425, 1700])
prices = np.array([245000, 312000, 279000, 308000, 199000, 219000, 405000, 324000, 319000, 255000])

# Reshape data for sklearn
house_sizes = house_sizes.reshape(-1, 1)

# Create and fit a Linear Regression model
model = LinearRegression()
model.fit(house_sizes, prices)

# Predict prices for new house sizes
new_sizes = np.array([1600, 1800, 2000, 2100]).reshape(-1, 1)
predicted_prices = model.predict(new_sizes)

# Plot the data and regression line
plt.scatter(house_sizes, prices, label='Data')
plt.plot(house_sizes, model.predict(house_sizes), color='red', label='Linear Regression')
plt.xlabel('House Size (sqft)')
plt.ylabel('Price ($)')
plt.legend()
plt.title('House Price Prediction')
plt.show()

# Display predicted prices for new house sizes
print("Predicted prices for new house sizes:")
for size, price in zip(new_sizes, predicted_prices):
    print(f"Size: {size[0]} sqft, Predicted Price: ${price:.2f}")

    
          

-----------------------------------------------------------------------------slip 3-----------------------------------------------------------------------



Q.1 Write a Java Program to implement Factory Design pattern for operating system example.
Ans ==

   package SADP;

public class FactoryDP {
    public static void main(String[] args) {
        OSFactory osf=new OSFactory();
        OS o=osf.getIns("Open");
        o.show();
        
    }
}

interface OS{
    void show();
}

class Android implements OS{
    public void show()
    {
        System.out.println(" I am Android");
    }
}
class Windows implements OS{
    public void show()
    {
        System.out.println(" I am Windows");
    }
}
class IOS implements OS{
    public void show()
    {
        System.out.println(" I am IOS");
    }
}

class OSFactory{
    public OS getIns(String str)
        {
            if(str.equalsIgnoreCase("Open"))
            {
                return new Android();
            }
            else{
                return new Windows();
            }
            
        }

}



Q.2 Write a python program to implement multiple Linear Regression for predicting
house price.
Ans ==


  import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Sample dataset
data = {
    'Feature1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Feature2': [2, 4, 5, 4, 6, 8, 9, 8, 10, 12],
    'Target': [3, 4, 7, 6, 8, 10, 13, 12, 14, 15],
}

# Create a DataFrame
df = pd.DataFrame(data)

# Split the dataset into features (X) and the target variable (y)
X = df[['Feature1', 'Feature2']]
y = df['Target']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create and train the multiple linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Plot the dataset and the regression line
plt.scatter(df['Feature1'], df['Target'], color='b', label='Data Points')
plt.plot(X_test['Feature1'], y_pred, color='r', label='Linear Regression')
plt.xlabel('Feature1')
plt.ylabel('Target')
plt.title('Multiple Linear Regression')
plt.legend()
plt.show



-----------------------------------------------------------------------------slip 4-----------------------------------------------------------------------



Q.1 Write a Java Program to implement Adapter pattern for Enumeration iterator.
Ans ==


  import java.util.Enumeration;
import java.util.Iterator;
import java.util.StringTokenizer;

// Adapter class to adapt Enumeration to Iterator
class EnumerationIteratorAdapter<T> implements Iterator<T> {
    private Enumeration<T> enumeration;

    public EnumerationIteratorAdapter(Enumeration<T> enumeration) {
        this.enumeration = enumeration;
    }

    @Override
    public boolean hasNext() {
        return enumeration.hasMoreElements();
    }

    @Override
    public T next() {
        return enumeration.nextElement();
    }

    @Override
    public void remove() {
        throw new UnsupportedOperationException("remove() method is not supported.");
    }
}

// Adapter class to adapt StringTokenizer to Enumeration
class StringTokenizerEnumerationAdapter implements Enumeration<String> {
    private StringTokenizer tokenizer;

    public StringTokenizerEnumerationAdapter(StringTokenizer tokenizer) {
        this.tokenizer = tokenizer;
    }

    @Override
    public boolean hasMoreElements() {
        return tokenizer.hasMoreTokens();
    }

    @Override
    public String nextElement() {
        return tokenizer.nextToken();
    }
}

public class AdapterPatternDemo {
    public static void main(String[] args) {
        // Create a StringTokenizer (source)
        StringTokenizer tokenizer = new StringTokenizer("One Two Three Four", " ");

        // Adapt the StringTokenizer to Enumeration using the adapter
        Enumeration<String> enumeration = new StringTokenizerEnumerationAdapter(tokenizer);

        // Adapt the Enumeration to Iterator using the adapter
        Iterator<String> iterator = new EnumerationIteratorAdapter<>(enumeration);

        // Use the Iterator interface to iterate through elements
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}



Q.2 Write a python program to implement logistic Regression for predicting
     whether a person will buy the insurance or not. Use insurance_data.csv.

Ans== 



-----------------------------------------------------------------------------slip 5-----------------------------------------------------------------------



Q.1 Write a Java Program to implement command pattern to test Remote Control
Ans== 

//package remoteControl;

import java.util.Scanner;

//Command interface
interface Command {
 void execute();
}

//Concrete command: Turn on the TV
class TvOnCommand implements Command {
 private Tv tv;

 public TvOnCommand(Tv tv) {
     this.tv = tv;
 }

 @Override
 public void execute() {
     tv.turnOn();
 }
}

//Concrete command: Turn off the TV
class TvOffCommand implements Command {
 private Tv tv;

 public TvOffCommand(Tv tv) {
     this.tv = tv;
 }

 @Override
 public void execute() {
     tv.turnOff();
 }
}



//Receiver: The TV
class Tv {

 private boolean isOn = false;

 public void turnOn() {
     isOn = true;
     System.out.println("TV is ON");
 }

 public void turnOff() {
     isOn = false;
     System.out.println("TV is OFF");
 }


}

//Invoker: Controls the commands
class RemoteControl {
 private Command command;

 public void setCommand(Command command) {
     this.command = command;
 }

 public void pressButton() {
     command.execute();
 }
}

public class TvRemoteControlDemo {
 public static void main(String[] args) {
     // Create the TV and commands
     Tv livingRoomTv = new Tv();
     TvOnCommand tvOn = new TvOnCommand(livingRoomTv);
     TvOffCommand tvOff = new TvOffCommand(livingRoomTv);

     // Create the remote control
     RemoteControl remote = new RemoteControl();

     // Menu-driven program
     Scanner scanner = new Scanner(System.in);
     int choice = 0; // Initialize choice with a default value

     do {
         System.out.println("\nTV Remote Control Menu:");
         System.out.println("1. Turn On TV");
         System.out.println("2. Turn Off TV");

         System.out.println("3. Exit");
         System.out.print("Enter your choice: ");

         if (scanner.hasNextInt()) {
             choice = scanner.nextInt();
             switch (choice) {
                 case 1:
                     remote.setCommand(tvOn);
                     remote.pressButton();
                     break;
                 case 2:
                     remote.setCommand(tvOff);
                     remote.pressButton();
                     break;

                 case 3:
                     System.out.println("Exiting the TV remote control.");
                     break;
                 default:
                     System.out.println("Invalid choice. Please try again.");
             }
         } else {
             System.out.println("Invalid input. Please enter a number.");
             scanner.next(); // Consume invalid input
         }
     } while (choice != 3);

     scanner.close();
 }
}


  
  


Q.2 Write a python program to implement logistic Regression for handwritten digit dataset.

Ans ==

   
 
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Sample dataset
data = {
    'Feature1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Feature2': [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],  # Binary classification labels
}

# Create a DataFrame
df = pd.DataFrame(data)

# Split the dataset into features (X) and labels (y)
X = df[['Feature1']]
y = df['Feature2']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Plot the dataset and the logistic regression boundary
plt.scatter(X['Feature1'], y, color='b', label='Data Points')
plt.plot(X_test, y_pred, color='r', label='Logistic Regression')
plt.xlabel('Feature1')
plt.ylabel('Label (0 or 1)')
plt.title('Logistic Regression for Binary Classification')
plt.legend()
plt.show()



-----------------------------------------------------------------------------slip 6-----------------------------------------------------------------------


Q.1 Write a Java Program to implement undo command to test Ceiling fan.
Ans ==

//package SADP.Q7CeilingFan;

import java.util.Scanner;

public class FanDemo {
    public static void main(String[] args) {
        
        SimpleRemoteController remote=new SimpleRemoteController();
        Fan fan1=new Fan();
        while(true){
        System.out.println("Do you want to turn on fan");
        System.out.println("1. ON");
        System.out.println("2. OFF");
        System.out.println("3. UNDO");
        System.out.println("Enter your choice :");
        Scanner sc = new Scanner(System.in);
        
        int choice=sc.nextInt();
        switch(choice){
            case 1: remote.setCommand(new FanOnCommand(fan1));
                    remote.buttonWasPressed();
                    remote.setCommand(new Undo(fan1));
                    remote.buttonWasPressed();
                    break;
            case 2: remote.setCommand(new FanOffCommand(fan1));
                    remote.buttonWasPressed();
                    break;
            case 3: remote.setCommand(new Undo(fan1));
                    remote.buttonWasPressed();
                    break;
        }
        }
    }
    
}


Q.2 Write a python program to implement Polynomial Regression for positionsal.csv dataset.
Ans == 

 import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# Create a sample dataset
X = np.array([1, 2, 3, 4, 5])
y = np.array([2, 8, 18, 32, 50])

# Reshape X into a 2D array (required by scikit-learn)
X = X.reshape(-1, 1)

# Create Polynomial Features (e.g., degree=2 for quadratic regression)
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)

# Create and fit the Polynomial Regression model
model = LinearRegression()
model.fit(X_poly, y)

# Predict values for the same X range
X_range = np.linspace(1, 5, 100).reshape(-1, 1)
X_range_poly = poly.transform(X_range)
y_pred = model.predict(X_range_poly)

# Plot the original data and the polynomial regression curve
plt.scatter(X, y, label='Data', color='blue')
plt.plot(X_range, y_pred, label='Polynomial Regression', color='red')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Polynomial Regression')
plt.legend()
plt.show()



-----------------------------------------------------------------------------slip 7-----------------------------------------------------------------------



Q.1 Write a Java Program to implement State Pattern for Gumball Machine. Create instance variable that holds current state from there, we just need to handle all actions, behaviors and           state transition that can happen.
Ans ==


// 10 GumballMachine class
class GumballMachine {
    private State noQuarterState;
    private State hasQuarterState;
    private State soldState;
    private State currentState;

    private int gumballCount;

    public GumballMachine(int numberOfGumballs) {
        noQuarterState = new NoQuarterState(this);
        hasQuarterState = new HasQuarterState(this);
        soldState = new SoldState(this);
        currentState = noQuarterState;
        gumballCount = numberOfGumballs;
    }

    // Setters for states
    public void setNoQuarterState() {
        currentState = noQuarterState;
    }

    public void setHasQuarterState() {
        currentState = hasQuarterState;
    }

    public void setSoldState() {
        currentState = soldState;
    }

    // Methods to handle actions
    public void insertQuarter() {
        currentState.insertQuarter();
    }

    public void ejectQuarter() {
        currentState.ejectQuarter();
    }

    public void turnCrank() {
        currentState.turnCrank();
        currentState.dispense();
    }

    public void releaseBall() {
        System.out.println("A gumball comes rolling out the slot...");
        if (gumballCount > 0) {
            gumballCount--;
        }
    }

    public int getGumballCount() {
        return gumballCount;
    }
}

// State interface
interface State {
    void insertQuarter();
    void ejectQuarter();
    void turnCrank();
    void dispense();
}

// Concrete State: NoQuarterState
class NoQuarterState implements State {
    private GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You inserted a quarter.");
        gumballMachine.setHasQuarterState();
    }

    @Override
    public void ejectQuarter() {
        System.out.println("You haven't inserted a quarter.");
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned the crank, but there's no quarter.");
    }

    @Override
    public void dispense() {
        System.out.println("You need to pay first.");
    }
}

// Concrete State: HasQuarterState
class HasQuarterState implements State {
    private GumballMachine gumballMachine;

    public HasQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You can't insert another quarter.");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Quarter returned.");
        gumballMachine.setNoQuarterState();
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned the crank...");
        gumballMachine.setSoldState();
    }

    @Override
    public void dispense() {
        System.out.println("No gumball dispensed.");
    }
}

// Concrete State: SoldState
class SoldState implements State {
    private GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("Please wait, we're already giving you a gumball.");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Sorry, you already turned the crank.");
    }

    @Override
    public void turnCrank() {
        System.out.println("Turning the crank twice doesn't get you another gumball.");
    }

    @Override
    public void dispense() {
        gumballMachine.releaseBall();
        if (gumballMachine.getGumballCount() > 0) {
            gumballMachine.setNoQuarterState();
        } else {
            System.out.println("Oops, out of gumballs!");
            gumballMachine.setNoQuarterState();
        }
    }
}

public class GumballMachineTest {
    public static void main(String[] args) {
        GumballMachine gumballMachine = new GumballMachine(5);

        System.out.println("Gumball Machine Example:");
        System.out.println("Current gumball count: " + gumballMachine.getGumballCount());

        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();

        gumballMachine.insertQuarter();
        gumballMachine.ejectQuarter();
        gumballMachine.turnCrank();

        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();
        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();

        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();
        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();
        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();

        System.out.println("Final gumball count: " + gumballMachine.getGumballCount());
    }
}



Q.2 Write a python program to implement Decision Tree Model for classification. Use Decision_Tree_Dataset.csv
Ans ==

   import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
data = {
    'company': [
        'google', 'google', 'google', 'google', 'google', 'google',
        'abc pharma', 'abc pharma', 'abc pharma', 'abc pharma',
        'facebook', 'facebook', 'facebook', 'facebook', 'facebook', 'facebook'
    ],
    'job': [
        'sales executive', 'sales executive', 'business manager', 'business manager', 'computer programmer', 'computer programmer',
        'sales executive', 'computer programmer', 'business manager', 'business manager',
        'sales executive', 'sales executive', 'business manager', 'business manager', 'computer programmer', 'computer programmer'
    ],
    'degree': [
        'bachelors', 'masters', 'bachelors', 'masters', 'bachelors', 'masters',
        'masters', 'bachelors', 'bachelors', 'masters',
        'bachelors', 'masters', 'bachelors', 'masters', 'bachelors', 'masters'
    ],
    'salary_more_then_100k': [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]
}

df = pd.DataFrame(data)

# Encode categorical variables using Label Encoding
label_encoder = LabelEncoder()
df['company'] = label_encoder.fit_transform(df['company'])
df['job'] = label_encoder.fit_transform(df['job'])
df['degree'] = label_encoder.fit_transform(df['degree'])
# Separate the features (X) and the target variable (y)
X = df.drop('salary_more_then_100k', axis=1)
y = df['salary_more_then_100k']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Decision Tree classification model
decision_tree = DecisionTreeClassifier()

# Fit the model to the training data
decision_tree.fit(X_train, y_train)

# Make predictions on the test data
y_pred = decision_tree.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Print the evaluation results
print("Accuracy:", accuracy)
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", report)




-----------------------------------------------------------------------------slip 8-----------------------------------------------------------------------



Q.1 Write a Java program to implement Adapter pattern to design Heart Model to Beat Model.
Ans ==

  
 // Heart Model interface
interface HeartModel {
    int getHeartRate();
    void registerObserver(BeatObserver observer);
    void removeObserver(BeatObserver observer);
    void registerObserver(BPMObserver observer);
    void removeObserver(BPMObserver observer);
}

// Beat Model interface
interface BeatModel {
    void on();
    void off();
    void setBPM(int bpm);
    int getBPM();
    void registerObserver(BeatObserver observer);
    void removeObserver(BeatObserver observer);
    void registerObserver(BPMObserver observer);
    void removeObserver(BPMObserver observer);
}

// Concrete Heart Model class
class HeartModelImpl implements HeartModel {
    private int heartRate = 70;
    // ... other implementation details

    @Override
    public int getHeartRate() {
        return heartRate;
    }

    @Override
    public void registerObserver(BeatObserver observer) {
        // Register observer for heart rate changes
    }

    @Override
    public void removeObserver(BeatObserver observer) {
        // Remove observer for heart rate changes
    }

    @Override
    public void registerObserver(BPMObserver observer) {
        // Register observer for BPM changes
    }

    @Override
    public void removeObserver(BPMObserver observer) {
        // Remove observer for BPM changes
    }
}

// Adapter class to adapt Heart Model to Beat Model
class HeartModelAdapter implements BeatModel {
    private HeartModel heartModel;

    public HeartModelAdapter(HeartModel heartModel) {
        this.heartModel = heartModel;
    }

    @Override
    public void on() {
        // Start the beat model
    }

    @Override
    public void off() {
        // Stop the beat model
    }

    @Override
    public void setBPM(int bpm) {
        // Set BPM of the beat model
    }

    @Override
    public int getBPM() {
        // Get BPM of the beat model
        return heartModel.getHeartRate();
    }

    @Override
    public void registerObserver(BeatObserver observer) {
        // Register observer for beat changes
    }

    @Override
    public void removeObserver(BeatObserver observer) {
        // Remove observer for beat changes
    }

    @Override
    public void registerObserver(BPMObserver observer) {
        // Register observer for BPM changes
    }

    @Override
    public void removeObserver(BPMObserver observer) {
        // Remove observer for BPM changes
    }
}

// Observer interfaces
interface BeatObserver {
    void updateBeat();
}

interface BPMObserver {
    void updateBPM();
}

public class AdapterPatternDemo {
    public static void main(String[] args) {
        // Create a Heart Model
        HeartModel heartModel = new HeartModelImpl();

        // Create a Beat Model adapter for the Heart Model
        BeatModel beatModel = new HeartModelAdapter(heartModel);

        // Use the Beat Model interface to interact with the Heart Model
        beatModel.on();
        System.out.println("Current BPM: " + beatModel.getBPM());

        // ... other interactions with the Beat Model
    }
}



Q.2 Write a python program to implement linear SVM for Regression. Use position_sal.csv.
Ans ==
 # Importing necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('position_sal.csv')

# Assuming 'Position' as the feature and 'Salary' as the target variable
X = data[['Position']]
y = data['Salary']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Support Vector Machine for Regression (SVR) model
model = SVR(kernel='linear')

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Visualize the results
plt.scatter(X_test, y_test, color='black', label='Actual')
plt.scatter(X_test, predictions, color='red', label='Predicted')
plt.xlabel('Position')
plt.ylabel('Salary')
plt.title('Linear SVM Regression')
plt.legend()
plt.show()



   

-----------------------------------------------------------------------------slip 9-----------------------------------------------------------------------


Q.1 Write a Java Program to implement Strategy Design pattern for arithmetic operations.
Ans ==
 // Strategy interface
interface Strategy {
    int doOperation(int num1, int num2);
}

// Concrete Strategies
class Addition implements Strategy {
    @Override
    public int doOperation(int num1, int num2) {
        return num1 + num2;
    }
}

class Subtraction implements Strategy {
    @Override
    public int doOperation(int num1, int num2) {
        return num1 - num2;
    }
}

class Multiplication implements Strategy {
    @Override
    public int doOperation(int num1, int num2) {
        return num1 * num2;
    }
}

// Context
class Context {
    private Strategy strategy;

    public Context(Strategy strategy) {
        this.strategy = strategy;
    }

    public int executeStrategy(int num1, int num2) {
        return strategy.doOperation(num1, num2);
    }
}

// Client code
public class Main {
    public static void main(String[] args) {
        // Create the context object
        Context context = new Context(new Addition());

        // Execute the strategy
        int result = context.executeStrategy(10, 5);

        // Print the result
        System.out.println(result); // 15
    }
}
  

Q.2 Write a python program to implement linear SVM for Classification. Use iris.csv.
Ans ==


import pandas as pd
from sklearn.datasets import load_iris
iris = load_iris()

iris.feature_names

iris.target_names

df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df['target'] = iris.target
df.head()

df[df.target==1].head()

df[df.target==2].head()

df['flower_name'] =df.target.apply(lambda x: iris.target_names[x])
df.head()

df[45:55]

df0 = df[:50]
df1 = df[50:100]
df2 = df[100:]

import matplotlib.pyplot as plt

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color="green",marker='+')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')
plt.show()
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color="green",marker='+')
plt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color="blue",marker='.')
plt.show()
from sklearn.model_selection import train_test_split

X = df.drop(['target','flower_name'], axis='columns')
y = df.target
print(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

len(X_train)

len(X_test)

from sklearn.svm import SVC
model = SVC()

model.fit(X_train, y_train)

model.score(X_test, y_test)

model.predict([[4.8,3.0,1.5,0.3]])

model_C = SVC(C=1)
model_C.fit(X_train, y_train)
print(model_C.score(X_test, y_test))

model_C = SVC(C=20)
model_C.fit(X_train, y_train)
print(model_C.score(X_test, y_test))

model_g = SVC(gamma=10)
model_g.fit(X_train, y_train)
print(model_g.score(X_test, y_test))

model_linear_kernal = SVC(kernel='rbf')  
model_linear_kernal.fit(X_train, y_train)
print(model_linear_kernal.score(X_test, y_test))




-----------------------------------------------------------------------------slip 10-----------------------------------------------------------------------



Q.1 Write a Java Program to implement Façade design pattern for Shape
Ans ==


class facade
{
    public static void main(String[] args)
    {
        ShapeMaker sp=new ShapeMaker();
        sp.drawCircle();
        sp.drawRectangle();
        sp.drawSquare();
    }
}
class ShapeMaker{
    private Shape Circle;
    private Shape Rectangle;
    private Shape Square;
    public ShapeMaker()
    {
        Circle =new Circle();
        Rectangle =new Rectangle();
        Square =new Square();
    }
    public void drawCircle()
    {
        Circle.draw();
    }
        public void drawRectangle()
    {
        Rectangle.draw();
    }
        public void drawSquare()
    {
        Square.draw();
    }
}
interface Shape{
    public void draw();
}
class Circle implements Shape{
     public void draw(){
        System.out.println("Circle : draw()");
     }

}
class Rectangle implements Shape{
     public void draw(){
        System.out.println("Rectangle : draw()");
     }

}
class Square implements Shape{
     public void draw(){
        System.out.println("Square : draw()");
     }

}


Q.2 Write a python program to implement k-nearest Neighbors algorithm to build a prediction model. Use Iris Dataset.
Ans ==

 import pandas as pd
from sklearn.datasets import load_iris
iris = load_iris()

iris.feature_names

iris.target_names

df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df['target'] = iris.target
df.head()

df[df.target==1].head()

df[df.target==2].head()

df['flower_name'] =df.target.apply(lambda x: iris.target_names[x])
df.head()

df[45:55]

df0 = df[:50]
df1 = df[50:100]
df2 = df[100:]

import matplotlib.pyplot as plt

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color="green",marker='+')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')

plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color="green",marker='+')
plt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color="blue",marker='.')

from sklearn.model_selection import train_test_split

X = df.drop(['target','flower_name'], axis='columns')
y = df.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

len(X_train)

len(X_test)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train,y_train)

print(knn.score(X_test, y_test))

print(knn.predict([[4.8,3.0,1.5,0.3]]))

from sklearn.metrics import confusion_matrix
y_pred = knn.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)

import matplotlib.pyplot as plt
import seaborn as sn
plt.figure(figsize=(7,5))
sn.heatmap(cm, annot=True)
plt.xlabel('Predicted')
plt.ylabel('Truth')
plt.show()
from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))



-----------------------------------------------------------------------------slip 11-----------------------------------------------------------------------


Q.1 Write a Java Program to implement Abstract Factory Pattern for Bank and Loan.
Ans==
  
   package sadp;
import java.util.*;
import java.io.*;

interface Bank
{
	String getBankName();
	
}
class ICICI implements Bank
{
	public final String bn;
	public ICICI()
	{
		bn="ICICI bank";
	}
	public String getBankName()
	{
		return bn;
		
	}
}

class BOI implements Bank
{
	public final String bn;
	public BOI()
	{
		bn="bank of india";
	}
	public String getBankName()
	{
		return bn;
		
	}
}

class Axis implements Bank
{
	public final String bn;
	public Axis()
	{
		bn="axix bank";
	}
	public String getBankName()
	{
		return bn;
		
	}
}

abstract class Loan
{
	protected double rate;
	abstract void getIntrestRate(double rate);
	public void CalculateLoanPayment(double la,int y)
	{
		double EMI;
		int num;
		num=y+12;
		rate=rate/1200;
		EMI=((rate+Math.pow((1+rate),num))/((Math.pow((1+rate),num))-1))*la;
		System.out.println("ur monthlu emi is" +EMI +"for amount "+la+" u have borrowed");
	}
}
class HouseLoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
class BLoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
class CarLoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
class ELoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
abstract class AbstractFactory
{
	public abstract Bank getBank(String bank);
	public abstract Loan getLoan(String loan);
}
class BankFactory extends AbstractFactory
{
	public Bank getBank(String bank)
	
	{
	if(bank==null)
	{
		return null;
	}
	else if(bank.equalsIgnoreCase("BOI"))
	{
		return new BOI();
	}
	else if(bank.equalsIgnoreCase("ICICI"))
	{
		return new ICICI();
	}
	
	else
	{
		return null;
	}
	}
	public Loan getLoan(String loan) {
		return null;
	}
}
class LoanFactory extends AbstractFactory
{
	public Bank getBank(String bank) {
		return null;
	}
public Loan getLoan(String loan)
	
	{
	if(loan==null)
	{
		return null;
	}
	else if(loan.equalsIgnoreCase("House Loan"))
	{
		return new HouseLoan();
	}
	else if(loan.equalsIgnoreCase("Education Loan"))
	{
		return new ELoan();
	}
	else
	{
		return null;
	}
}
class FactoryCreator
{
	public static AbstractFactory getFactory(String ch)
	{
		if(ch.equalsIgnoreCase("Bank"))
		{
			return new BankFactory();
		}
		else if(ch.equalsIgnoreCase("Loan"))
		{
			return new LoanFactory();
		}
		else
		{
			return null;
		}
	}
		
	}
}
public class AbstractFactoryDP {

	public static void main(String[] args)throws IOException {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("1:bank\n2:Loan");
		int n=sc.nextInt();
		switch(n)
		{
		case 1:	AbstractFactory BankFactory=sadp.LoanFactory.FactoryCreator.getFactory("bank");
				System.out.println("Enter bank name:");
				String bname=br.readLine();		
				Bank b=BankFactory.getBank(bname);
				System.out.println("\nur accout for "+b.getBankName()+" is created");
				break;
		case 2:	AbstractFactory LoanFactory=sadp.LoanFactory.FactoryCreator.getFactory("loan");
				System.out.println("Enter type of loan:");
				String lname=br.readLine();
				
				System.out.println("Enter loan amount:");
				double lamount =Double.parseDouble(br.readLine());
				
				System.out.println("Enter intrest rate:");
				double rate=Double.parseDouble(br.readLine());
				
				System.out.println("\nEnter years ");
				int years=Integer.parseInt(br.readLine());
				
				Loan l=LoanFactory.getLoan(lname);
				l.getIntrestRate(rate);
				l.CalculateLoanPayment(lamount,years);
				break;
				
		default:	System.out.println("wrong ch");
				
		}
	}

}



Q.2 Write a python program to Implement Naïve Bayes for classification. Use titanic.csv/spam.csv dataset.
Ans==
  
   import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import LabelEncoder

# Load the Titanic dataset
titanic_data = pd.read_csv('titanic.csv')

# Drop irrelevant columns or handle missing values as needed
titanic_data = titanic_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked'], axis=1)
titanic_data = titanic_data.dropna()

# Convert categorical variables to numerical
label_encoder = LabelEncoder()
titanic_data['Sex'] = label_encoder.fit_transform(titanic_data['Sex'])

# Map 'Survived' to binary values (0 or 1)
titanic_data['Survived'] = titanic_data['Survived'].map({0: 'No', 1: 'Yes'})

# Split the data into features (X) and target variable (y)
X = titanic_data.drop('Survived', axis=1)
y = titanic_data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Gaussian Naïve Bayes classifier
model = GaussianNB()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('\nConfusion Matrix:')
print(conf_matrix)
print('\nClassification Report:')
print(classification_rep)



-----------------------------------------------------------------------------slip 12-----------------------------------------------------------------------



Q.1 Write a Java Program to implement Factory method for Pizza Store with createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizza’s like     NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

Ans== 

   // 3 Pizza interface
interface Pizza {
    void prepare();
    void bake();
    void cut();
    void box();
}

// Concrete Pizza: NY Style Cheese Pizza
class NyStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing NY Style Cheese Pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking NY Style Cheese Pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting NY Style Cheese Pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing NY Style Cheese Pizza");
    }
}

// Concrete Pizza: Chicago Style Cheese Pizza
class ChicagoStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing Chicago Style Cheese Pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking Chicago Style Cheese Pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting Chicago Style Cheese Pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing Chicago Style Cheese Pizza");
    }
}

// Pizza Store with Factory Method
abstract class PizzaStore {
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }

    protected abstract Pizza createPizza(String type);
}

// Concrete Pizza Store: NY Pizza Store
class NyPizzaStore extends PizzaStore {
    @Override
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new NyStyleCheesePizza();
        } else {
            // Add more pizza types as needed
            return null;
        }
    }
}

// Concrete Pizza Store: Chicago Pizza Store
class ChicagoPizzaStore extends PizzaStore {
    @Override
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new ChicagoStyleCheesePizza();
        } else {
            // Add more pizza types as needed
            return null;
        }
    }
}

public class PizzaFactoryExample {
    public static void main(String[] args) {
        PizzaStore nyPizzaStore = new NyPizzaStore();
        PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();

        Pizza nyCheesePizza = nyPizzaStore.orderPizza("cheese");
        System.out.println("Ordered a " + nyCheesePizza.getClass().getSimpleName() + "\n");

        Pizza chicagoCheesePizza = chicagoPizzaStore.orderPizza("cheese");
        System.out.println("Ordered a " + chicagoCheesePizza.getClass().getSimpleName() + "\n");
    }
}



Q.2 Write a python program to implement k-means algorithm. Use income.csv dataset.
Ans== 
# Importing necessary libraries
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('income.csv')

# Assuming 'Income' as the feature for clustering
X = data[['Income']]

# Specify the number of clusters (k)
k = 3

# Initialize the KMeans model
kmeans = KMeans(n_clusters=k, random_state=42)

# Fit the model to the data
kmeans.fit(X)

# Get the cluster labels
labels = kmeans.labels_

# Add cluster labels to the original dataset
data['Cluster'] = labels

# Visualize the clusters
plt.scatter(X, data['Cluster'], c=data['Cluster'], cmap='rainbow')
plt.xlabel('Income')
plt.ylabel('Cluster')
plt.title('K-Means Clustering')
plt.show()


-----------------------------------------------------------------------------slip 13-----------------------------------------------------------------------


Q.1 Write a Java Program to implement I/O Decorator for converting uppercase letters to lower case letters.
Ans== 

   import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

class LowerCaseInputStream extends FilterInputStream {

    public LowerCaseInputStream(InputStream in) {
        super(in);
    }

    @Override
    public int read() throws IOException {
        int c = super.read();
        if (c >= 'A' && c <= 'Z') {
            c += 32; // Convert uppercase to lowercase
        }
        return c;
    }
}

public class IODecoratorExample {
    public static void main(String[] args) {
        try {
            // Replace 'inputStream' with your desired InputStream source
            InputStream inputStream = new LowerCaseInputStream(System.in);

            int data;
            System.out.println("Enter text (Ctrl+C to exit):");

            while ((data = inputStream.read()) != -1) {
                System.out.print((char) data);
            }

            inputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



Q.2 Write a python program to implement Agglomerative clustering on a income.csv dataset.
Ans== 


import numpy as np
from sklearn.datasets import make_blobs
from sklearn.cluster import AgglomerativeClustering
import matplotlib.pyplot as plt

# Generate a synthetic dataset with three clusters
X, y = make_blobs(n_samples=300, centers=3, random_state=42)

# Create an Agglomerative Clustering model with three clusters
agg_cluster = AgglomerativeClustering(n_clusters=3)

# Fit the model to the data
agg_cluster.fit(X)

# Get the cluster labels
cluster_labels = agg_cluster.labels_

# Plot the data points with cluster assignments
plt.scatter(X[:, 0], X[:, 1], c=cluster_labels, cmap='viridis')
plt.title("Agglomerative Clustering")
plt.show()


-----------------------------------------------------------------------------slip 14-----------------------------------------------------------------------



Q.1 Write a java program to implement Adapter pattern to design Heart Model to Beat Model.
Ans ==

// Heart Model interface
interface HeartModel {
    int getHeartRate();
    void registerObserver(BeatObserver observer);
    void removeObserver(BeatObserver observer);
    void registerObserver(BPMObserver observer);
    void removeObserver(BPMObserver observer);
}

// Beat Model interface
interface BeatModel {
    void on();
    void off();
    void setBPM(int bpm);
    int getBPM();
    void registerObserver(BeatObserver observer);
    void removeObserver(BeatObserver observer);
    void registerObserver(BPMObserver observer);
    void removeObserver(BPMObserver observer);
}

// Concrete Heart Model class
class HeartModelImpl implements HeartModel {
    private int heartRate = 70;
    // ... other implementation details

    @Override
    public int getHeartRate() {
        return heartRate;
    }

    @Override
    public void registerObserver(BeatObserver observer) {
        // Register observer for heart rate changes
    }

    @Override
    public void removeObserver(BeatObserver observer) {
        // Remove observer for heart rate changes
    }

    @Override
    public void registerObserver(BPMObserver observer) {
        // Register observer for BPM changes
    }

    @Override
    public void removeObserver(BPMObserver observer) {
        // Remove observer for BPM changes
    }
}

// Adapter class to adapt Heart Model to Beat Model
class HeartModelAdapter implements BeatModel {
    private HeartModel heartModel;

    public HeartModelAdapter(HeartModel heartModel) {
        this.heartModel = heartModel;
    }

    @Override
    public void on() {
        // Start the beat model
    }

    @Override
    public void off() {
        // Stop the beat model
    }

    @Override
    public void setBPM(int bpm) {
        // Set BPM of the beat model
    }

    @Override
    public int getBPM() {
        // Get BPM of the beat model
        return heartModel.getHeartRate();
    }

    @Override
    public void registerObserver(BeatObserver observer) {
        // Register observer for beat changes
    }

    @Override
    public void removeObserver(BeatObserver observer) {
        // Remove observer for beat changes
    }

    @Override
    public void registerObserver(BPMObserver observer) {
        // Register observer for BPM changes
    }

    @Override
    public void removeObserver(BPMObserver observer) {
        // Remove observer for BPM changes
    }
}

// Observer interfaces
interface BeatObserver {
    void updateBeat();
}

interface BPMObserver {
    void updateBPM();
}

public class AdapterPatternDemo {
    public static void main(String[] args) {
        // Create a Heart Model
        HeartModel heartModel = new HeartModelImpl();

        // Create a Beat Model adapter for the Heart Model
        BeatModel beatModel = new HeartModelAdapter(heartModel);

        // Use the Beat Model interface to interact with the Heart Model
        beatModel.on();
        System.out.println("Current BPM: " + beatModel.getBPM());

        // ... other interactions with the Beat Model
    }
}


Q.2 Write a python program to implement k-means algorithm on a synthetic dataset

Ans== 

import numpy as np
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Generate a synthetic dataset with three clusters
X, y = make_blobs(n_samples=300, centers=3, random_state=42)

# Create a KMeans clusterer with three clusters
kmeans = KMeans(n_clusters=3)

# Fit the model to the data
kmeans.fit(X)

# Get the cluster centers and labels
cluster_centers = kmeans.cluster_centers_
cluster_labels = kmeans.labels_

# Plot the data points and cluster centers
plt.scatter(X[:, 0], X[:, 1], c=cluster_labels, cmap='viridis')
plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1,], c='red', marker='x', s=200)
plt.title("K-Means Clustering")
plt.show()


-----------------------------------------------------------------------------slip 15-----------------------------------------------------------------------


Q.1 Write a Java Program to implement Iterator Pattern for Designing Menu like Breakfast, Lunch or Dinner Menu.

Ans== 

//package SADP.IteratorDP;

import java.text.BreakIterator;

interface Iterator{
    public boolean hasNext();
    public Object next();

}
 interface Menu{
    public Iterator getMenu();
 }

public class Breakfast implements Menu {
    public String names[]={"Vadapav", "Misal","Dosa"};
    
    public Iterator getMenu()
    {
        return new BreakfastIter();
    }
    
    private class BreakfastIter implements Iterator
    {
        int index;
        public boolean hasNext()
        {
            if(index<names.length)
            {
                return true;
            }
            return false;
        }

        public Object next()
        {
            if(this.hasNext())
            {
                return names[index++];

            }
            return null;
        }
    } 
}




Q.2 Write a python program to Implement Naïve Bayes for classification. Usetitanic.csv/spam.csv dataset.
Ans ==

    
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import LabelEncoder

# Load the Titanic dataset
titanic_data = pd.read_csv('titanic.csv')

# Drop irrelevant columns or handle missing values as needed
titanic_data = titanic_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked'], axis=1)
titanic_data = titanic_data.dropna()

# Convert categorical variables to numerical
label_encoder = LabelEncoder()
titanic_data['Sex'] = label_encoder.fit_transform(titanic_data['Sex'])

# Map 'Survived' to binary values (0 or 1)
titanic_data['Survived'] = titanic_data['Survived'].map({0: 'No', 1: 'Yes'})

# Split the data into features (X) and target variable (y)
X = titanic_data.drop('Survived', axis=1)
y = titanic_data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Gaussian Naïve Bayes classifier
model = GaussianNB()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('\nConfusion Matrix:')
print(conf_matrix)
print('\nClassification Report:')
print(classification_rep)




-----------------------------------------------------------------------------slip 16-----------------------------------------------------------------------


Q.1 Write a Java Program to implement Adapter pattern for Enumeration iterator.
Ans== 

  
  import java.util.Enumeration;
import java.util.Iterator;
import java.util.StringTokenizer;

// Adapter class to adapt Enumeration to Iterator
class EnumerationIteratorAdapter<T> implements Iterator<T> {
    private Enumeration<T> enumeration;

    public EnumerationIteratorAdapter(Enumeration<T> enumeration) {
        this.enumeration = enumeration;
    }

    @Override
    public boolean hasNext() {
        return enumeration.hasMoreElements(); 
    }

    @Override
    public T next() {
        return enumeration.nextElement();
    }

    @Override
    public void remove() {
        throw new UnsupportedOperationException("remove() method is not supported.");
    }
}

// Adapter class to adapt StringTokenizer to Enumeration
class StringTokenizerEnumerationAdapter implements Enumeration<String> {
    private StringTokenizer tokenizer;

    public StringTokenizerEnumerationAdapter(StringTokenizer tokenizer) {
        this.tokenizer = tokenizer;
    }

    @Override
    public boolean hasMoreElements() {
        return tokenizer.hasMoreTokens();
    }

    @Override
    public String nextElement() {
        return tokenizer.nextToken();
    }
}

public class AdapterPatternDemo {
    public static void main(String[] args) {
        // Create a StringTokenizer (source)
        StringTokenizer tokenizer = new StringTokenizer("One Two Three Four", " ");

        // Adapt the StringTokenizer to Enumeration using the adapter
        Enumeration<String> enumeration = new StringTokenizerEnumerationAdapter(tokenizer);

        // Adapt the Enumeration to Iterator using the adapter
        Iterator<String> iterator = new EnumerationIteratorAdapter<>(enumeration);

        // Use the Iterator interface to iterate through elements
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}



Q.2 Write a python program to implement k-nearest Neighbors algorithm to build aprediction model. Use Iris Dataset.
Ans==  

  import pandas as pd
from sklearn.datasets import load_iris
iris = load_iris()

iris.feature_names

iris.target_names

df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df['target'] = iris.target
df.head()

df[df.target==1].head()

df[df.target==2].head()

df['flower_name'] =df.target.apply(lambda x: iris.target_names[x])
df.head()

df[45:55]

df0 = df[:50]
df1 = df[50:100]
df2 = df[100:]

import matplotlib.pyplot as plt

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color="green",marker='+')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')

plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color="green",marker='+')
plt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color="blue",marker='.')

from sklearn.model_selection import train_test_split

X = df.drop(['target','flower_name'], axis='columns')
y = df.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

len(X_train)

len(X_test)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train,y_train)

print(knn.score(X_test, y_test))

print(knn.predict([[4.8,3.0,1.5,0.3]]))

from sklearn.metrics import confusion_matrix
y_pred = knn.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)

import matplotlib.pyplot as plt
import seaborn as sn
plt.figure(figsize=(7,5))
sn.heatmap(cm, annot=True)
plt.xlabel('Predicted')
plt.ylabel('Truth')
plt.show()
from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))



-----------------------------------------------------------------------------slip 17-----------------------------------------------------------------------


Q.1 Write a Java Program to implement Strategy Design pattern for arithmetic operations. 
Ans== 

// Strategy interface
interface ArithmeticOperation {
    int performOperation(int num1, int num2);
}

// Concrete strategy classes
class Addition implements ArithmeticOperation {
    @Override
    public int performOperation(int num1, int num2) {
        return num1 + num2;
    }
}

class Subtraction implements ArithmeticOperation {
    @Override
    public int performOperation(int num1, int num2) {
        return num1 - num2;
    }
}

class Multiplication implements ArithmeticOperation {
    @Override
    public int performOperation(int num1, int num2) {
        return num1 * num2;
    }
}

// Context class
class Calculator {
    private ArithmeticOperation operation;

    public void setOperation(ArithmeticOperation operation) {
        this.operation = operation;
    }

    public int executeOperation(int num1, int num2) {
        if (operation != null) {
            return operation.performOperation(num1, num2);
        }
        throw new IllegalStateException("Arithmetic operation not set");
    }
}

// Client code
public class StrategyPatternExample {
    public static void main(String[] args) {
        // Create context
        Calculator calculator = new Calculator();

        // Use addition strategy
        calculator.setOperation(new Addition());
        int result1 = calculator.executeOperation(5, 3);
        System.out.println("Addition Result: " + result1);

        // Use subtraction strategy
        calculator.setOperation(new Subtraction());
        int result2 = calculator.executeOperation(8, 2);
        System.out.println("Subtraction Result: " + result2);

        // Use multiplication strategy
        calculator.setOperation(new Multiplication());
        int result3 = calculator.executeOperation(4, 6);
        System.out.println("Multiplication Result: " + result3);
    }
}



Q.2 Write a python program to implement linear SVM for Classification. Use iris.csv
Ans==

  import pandas as pd
from sklearn.datasets import load_iris
iris = load_iris()

iris.feature_names

iris.target_names

df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

df['target'] = iris.target
df.head()

df[df.target==1].head()

df[df.target==2].head()

df['flower_name'] =df.target.apply(lambda x: iris.target_names[x])
df.head()

df[45:55]

df0 = df[:50]
df1 = df[50:100]
df2 = df[100:]

import matplotlib.pyplot as plt

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color="green",marker='+')
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color="blue",marker='.')
plt.show()
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color="green",marker='+')
plt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color="blue",marker='.')
plt.show()
from sklearn.model_selection import train_test_split

X = df.drop(['target','flower_name'], axis='columns')
y = df.target
print(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

len(X_train)

len(X_test)

from sklearn.svm import SVC
model = SVC()

model.fit(X_train, y_train)

model.score(X_test, y_test)

model.predict([[4.8,3.0,1.5,0.3]])

model_C = SVC(C=1)
model_C.fit(X_train, y_train)
print(model_C.score(X_test, y_test))

model_C = SVC(C=20)
model_C.fit(X_train, y_train)
print(model_C.score(X_test, y_test))

model_g = SVC(gamma=10)
model_g.fit(X_train, y_train)
print(model_g.score(X_test, y_test))

model_linear_kernal = SVC(kernel='rbf')  
model_linear_kernal.fit(X_train, y_train)
print(model_linear_kernal.score(X_test, y_test))




-----------------------------------------------------------------------------slip 18-----------------------------------------------------------------------


Q.1 Write a Java Program to implement Abstract Factory Pattern for Bank and Loan. 
Ans== 

package sadp;
import java.util.*;
import java.io.*;

interface Bank
{
	String getBankName();
	
}
class ICICI implements Bank
{
	public final String bn;
	public ICICI()
	{
		bn="ICICI bank";
	}
	public String getBankName()
	{
		return bn;
		
	}
}

class BOI implements Bank
{
	public final String bn;
	public BOI()
	{
		bn="bank of india";
	}
	public String getBankName()
	{
		return bn;
		
	}
}

class Axis implements Bank
{
	public final String bn;
	public Axis()
	{
		bn="axix bank";
	}
	public String getBankName()
	{
		return bn;
		
	}
}

abstract class Loan
{
	protected double rate;
	abstract void getIntrestRate(double rate);
	public void CalculateLoanPayment(double la,int y)
	{
		double EMI;
		int num;
		num=y+12;
		rate=rate/1200;
		EMI=((rate+Math.pow((1+rate),num))/((Math.pow((1+rate),num))-1))*la;
		System.out.println("ur monthlu emi is" +EMI +"for amount "+la+" u have borrowed");
	}
}
class HouseLoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
class BLoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
class CarLoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
class ELoan extends Loan
{
	public void getIntrestRate(double r)
	{
		rate=r;
	}
}
abstract class AbstractFactory
{
	public abstract Bank getBank(String bank);
	public abstract Loan getLoan(String loan);
}
class BankFactory extends AbstractFactory
{
	public Bank getBank(String bank)
	
	{
	if(bank==null)
	{
		return null;
	}
	else if(bank.equalsIgnoreCase("BOI"))
	{
		return new BOI();
	}
	else if(bank.equalsIgnoreCase("ICICI"))
	{
		return new ICICI();
	}
	
	else
	{
		return null;
	}
	}
	public Loan getLoan(String loan) {
		return null;
	}
}
class LoanFactory extends AbstractFactory
{
	public Bank getBank(String bank) {
		return null;
	}
public Loan getLoan(String loan)
	
	{
	if(loan==null)
	{
		return null;
	}
	else if(loan.equalsIgnoreCase("House Loan"))
	{
		return new HouseLoan();
	}
	else if(loan.equalsIgnoreCase("Education Loan"))
	{
		return new ELoan();
	}
	else
	{
		return null;
	}
}
class FactoryCreator
{
	public static AbstractFactory getFactory(String ch)
	{
		if(ch.equalsIgnoreCase("Bank"))
		{
			return new BankFactory();
		}
		else if(ch.equalsIgnoreCase("Loan"))
		{
			return new LoanFactory();
		}
		else
		{
			return null;
		}
	}
		
	}
}
public class AbstractFactoryDP {

	public static void main(String[] args)throws IOException {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("1:bank\n2:Loan");
		int n=sc.nextInt();
		switch(n)
		{
		case 1:	AbstractFactory BankFactory=sadp.LoanFactory.FactoryCreator.getFactory("bank");
				System.out.println("Enter bank name:");
				String bname=br.readLine();		
				Bank b=BankFactory.getBank(bname);
				System.out.println("\nur accout for "+b.getBankName()+" is created");
				break;
		case 2:	AbstractFactory LoanFactory=sadp.LoanFactory.FactoryCreator.getFactory("loan");
				System.out.println("Enter type of loan:");
				String lname=br.readLine();
				
				System.out.println("Enter loan amount:");
				double lamount =Double.parseDouble(br.readLine());
				
				System.out.println("Enter intrest rate:");
				double rate=Double.parseDouble(br.readLine());
				
				System.out.println("\nEnter years ");
				int years=Integer.parseInt(br.readLine());
				
				Loan l=LoanFactory.getLoan(lname);
				l.getIntrestRate(rate);
				l.CalculateLoanPayment(lamount,years);
				break;
				
		default:	System.out.println("wrong ch");
				
		}
	}

}


Q.2 Write a python program to implement linear SVM for Regression. Use position_sal.csv
Ans==

 import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.svm import SVR

# Load the dataset
dataset = pd.read_csv('Position_Salaries.csv')

# Split the dataset into X and Y
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

# Split the X and Y dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Perform Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

# Fit SVM to the Training set
from sklearn.svm import SVR
regressor = SVR(kernel='linear')
regressor.fit(X_train, y_train)

# Predicting a new result
y_pred = regressor.predict([[6.5]])

# Visualizing the SVR results
plt.scatter(X_train, y_train, color='red')
plt.plot(X_train, regressor.predict(X_train), color='blue')
plt.title('Salary vs Experience (SVR)')
plt.xlabel('Experience')
plt.ylabel('Salary')
plt.show()


-----------------------------------------------------------------------------slip 19-----------------------------------------------------------------------


Q.1 Write a Java Program to implement command pattern to test Remote Control.
Ans==

  //package remoteControl;

import java.util.Scanner;

//Command interface
interface Command {
 void execute();
}

//Concrete command: Turn on the TV
class TvOnCommand implements Command {
 private Tv tv;

 public TvOnCommand(Tv tv) {
     this.tv = tv;
 }

 @Override
 public void execute() {
     tv.turnOn();
 }
}

//Concrete command: Turn off the TV
class TvOffCommand implements Command {
 private Tv tv;

 public TvOffCommand(Tv tv) {
     this.tv = tv;
 }

 @Override
 public void execute() {
     tv.turnOff();
 }
}



//Receiver: The TV
class Tv {

 private boolean isOn = false;

 public void turnOn() {
     isOn = true;
     System.out.println("TV is ON");
 }

 public void turnOff() {
     isOn = false;
     System.out.println("TV is OFF");
 }


}

//Invoker: Controls the commands
class RemoteControl {
 private Command command;

 public void setCommand(Command command) {
     this.command = command;
 }

 public void pressButton() {
     command.execute();
 }
}

public class TvRemoteControlDemo {
 public static void main(String[] args) {
     // Create the TV and commands
     Tv livingRoomTv = new Tv();
     TvOnCommand tvOn = new TvOnCommand(livingRoomTv);
     TvOffCommand tvOff = new TvOffCommand(livingRoomTv);

     // Create the remote control
     RemoteControl remote = new RemoteControl();

     // Menu-driven program
     Scanner scanner = new Scanner(System.in);
     int choice = 0; // Initialize choice with a default value

     do {
         System.out.println("\nTV Remote Control Menu:");
         System.out.println("1. Turn On TV");
         System.out.println("2. Turn Off TV");

         System.out.println("3. Exit");
         System.out.print("Enter your choice: ");

         if (scanner.hasNextInt()) {
             choice = scanner.nextInt();
             switch (choice) {
                 case 1:
                     remote.setCommand(tvOn);
                     remote.pressButton();
                     break;
                 case 2:
                     remote.setCommand(tvOff);
                     remote.pressButton();
                     break;

                 case 3:
                     System.out.println("Exiting the TV remote control.");
                     break;
                 default:
                     System.out.println("Invalid choice. Please try again.");
             }
         } else {
             System.out.println("Invalid input. Please enter a number.");
             scanner.next(); // Consume invalid input
         }
     } while (choice != 3);

     scanner.close();
 }
}





Q.2 Write a python program to Implement Decision Tree Model for classification. Use Decision_Tree_Dataset.csv.
Ans==

  

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
data = {
    'company': [
        'google', 'google', 'google', 'google', 'google', 'google',
        'abc pharma', 'abc pharma', 'abc pharma', 'abc pharma',
        'facebook', 'facebook', 'facebook', 'facebook', 'facebook', 'facebook'
    ],
    'job': [
        'sales executive', 'sales executive', 'business manager', 'business manager', 'computer programmer', 'computer programmer',
        'sales executive', 'computer programmer', 'business manager', 'business manager',
        'sales executive', 'sales executive', 'business manager', 'business manager', 'computer programmer', 'computer programmer'
    ],
    'degree': [
        'bachelors', 'masters', 'bachelors', 'masters', 'bachelors', 'masters',
        'masters', 'bachelors', 'bachelors', 'masters',
        'bachelors', 'masters', 'bachelors', 'masters', 'bachelors', 'masters'
    ],
    'salary_more_then_100k': [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]
}

df = pd.DataFrame(data)

# Encode categorical variables using Label Encoding
label_encoder = LabelEncoder()
df['company'] = label_encoder.fit_transform(df['company'])
df['job'] = label_encoder.fit_transform(df['job'])
df['degree'] = label_encoder.fit_transform(df['degree'])
# Separate the features (X) and the target variable (y)
X = df.drop('salary_more_then_100k', axis=1)
y = df['salary_more_then_100k']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Decision Tree classification model
decision_tree = DecisionTreeClassifier()

# Fit the model to the training data
decision_tree.fit(X_train, y_train)

# Make predictions on the test data
y_pred = decision_tree.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Print the evaluation results
print("Accuracy:", accuracy)
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", report)




-----------------------------------------------------------------------------slip 20-----------------------------------------------------------------------



Q.1 Write a Java Program to implement Factory Design pattern for operating system.
Ans==

  
package SADP;

public class FactoryDP {
    public static void main(String[] args) {
        OSFactory osf=new OSFactory();
        OS o=osf.getIns("Open");
        o.show();
        
    }
}

interface OS{
    void show();
}

class Android implements OS{
    public void show()
    {
        System.out.println(" I am Android");
    }
}
class Windows implements OS{
    public void show()
    {
        System.out.println(" I am Windows");
    }
}
class IOS implements OS{
    public void show()
    {
        System.out.println(" I am IOS");
    }
}

class OSFactory{
    public OS getIns(String str)
        {
            if(str.equalsIgnoreCase("Open"))
            {
                return new Android();
            }
            else{
                return new Windows();
            }
            
        }

}



Q.2 Write a python program to implement Polynomial Regression for given dataset. Use position_sal.csv.
Ans==
  
 import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# Create a sample dataset
X = np.array([1, 2, 3, 4, 5])
y = np.array([2, 8, 18, 32, 50])

# Reshape X into a 2D array (required by scikit-learn)
X = X.reshape(-1, 1)

# Create Polynomial Features (e.g., degree=2 for quadratic regression)
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)

# Create and fit the Polynomial Regression model
model = LinearRegression()
model.fit(X_poly, y)

# Predict values for the same X range
X_range = np.linspace(1, 5, 100).reshape(-1, 1)
X_range_poly = poly.transform(X_range)
y_pred = model.predict(X_range_poly)

# Plot the original data and the polynomial regression curve
plt.scatter(X, y, label='Data', color='blue')
plt.plot(X_range, y_pred, label='Polynomial Regression', color='red')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Polynomial Regression')
plt.legend()
plt.show()


  
-----------------------------------------------------------------------------slip 21-----------------------------------------------------------------------

   

Q.1 Write a Java Program to implement Factory method for Pizza Store with
createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create
variety of pizza’s like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

Ans== 

  // 3 Pizza interface
interface Pizza {
    void prepare();
    void bake();
    void cut();
    void box();
}

// Concrete Pizza: NY Style Cheese Pizza
class NyStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing NY Style Cheese Pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking NY Style Cheese Pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting NY Style Cheese Pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing NY Style Cheese Pizza");
    }
}

// Concrete Pizza: Chicago Style Cheese Pizza
class ChicagoStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing Chicago Style Cheese Pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking Chicago Style Cheese Pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting Chicago Style Cheese Pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing Chicago Style Cheese Pizza");
    }
}

// Pizza Store with Factory Method
abstract class PizzaStore {
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }

    protected abstract Pizza createPizza(String type);
}

// Concrete Pizza Store: NY Pizza Store
class NyPizzaStore extends PizzaStore {
    @Override
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new NyStyleCheesePizza();
        } else {
            // Add more pizza types as needed
            return null;
        }
    }
}

// Concrete Pizza Store: Chicago Pizza Store
class ChicagoPizzaStore extends PizzaStore {
    @Override
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new ChicagoStyleCheesePizza();
        } else {
            // Add more pizza types as needed
            return null;
        }
    }
}

public class PizzaFactoryExample {
    public static void main(String[] args) {
        PizzaStore nyPizzaStore = new NyPizzaStore();
        PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();

        Pizza nyCheesePizza = nyPizzaStore.orderPizza("cheese");
        System.out.println("Ordered a " + nyCheesePizza.getClass().getSimpleName() + "\n");

        Pizza chicagoCheesePizza = chicagoPizzaStore.orderPizza("cheese");
        System.out.println("Ordered a " + chicagoCheesePizza.getClass().getSimpleName() + "\n");
    }
}


Q.2 Write a python program to implement logistic Regression for handwritten digit dataset.
Ans== 


  
 import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Sample dataset
data = {
    'Feature1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Feature2': [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],  # Binary classification labels
}

# Create a DataFrame
df = pd.DataFrame(data)

# Split the dataset into features (X) and labels (y)
X = df[['Feature1']]
y = df['Feature2']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Plot the dataset and the logistic regression boundary
plt.scatter(X['Feature1'], y, color='b', label='Data Points')
plt.plot(X_test, y_pred, color='r', label='Logistic Regression')
plt.xlabel('Feature1')
plt.ylabel('Label (0 or 1)')
plt.title('Logistic Regression for Binary Classification')
plt.legend()
plt.show()



-----------------------------------------------------------------------------slip 22-----------------------------------------------------------------------


Q.1 Write a Java Program to implement undo command to test Ceiling fan.
Ans== 
  

   import java.util.Stack;

// Ceiling Fan class representing the receiver
class CeilingFan {
    private String location;
    private int speed;

    public CeilingFan(String location) {
        this.location = location;
        this.speed = 0;
    }

    public void high() {
        speed = 3;
        System.out.println(location + " ceiling fan is on high.");
    }

    public void medium() {
        speed = 2;
        System.out.println(location + " ceiling fan is on medium.");
    }

    public void low() {
        speed = 1;
        System.out.println(location + " ceiling fan is on low.");
    }

    public void off() {
        speed = 0;
        System.out.println(location + " ceiling fan is off.");
    }

    public int getSpeed() {
        return speed;
    }
}

// Command interface
interface Command {
    void execute();
    void undo();
}

// Concrete Command for turning the ceiling fan on at high speed
class CeilingFanHighCommand implements Command {
    private CeilingFan ceilingFan;
    private int prevSpeed;

    public CeilingFanHighCommand(CeilingFan ceilingFan) {
        this.ceilingFan = ceilingFan;
    }

    @Override
    public void execute() {
        prevSpeed = ceilingFan.getSpeed();
        ceilingFan.high();
    }

    @Override
    public void undo() {
        if (prevSpeed == 3) {
            ceilingFan.high();
        } else if (prevSpeed == 2) {
            ceilingFan.medium();
        } else if (prevSpeed == 1) {
            ceilingFan.low();
        } else if (prevSpeed == 0) {
            ceilingFan.off();
        }
    }
}

// Concrete Command for turning the ceiling fan off
class CeilingFanOffCommand implements Command {
    private CeilingFan ceilingFan;
    private int prevSpeed;

    public CeilingFanOffCommand(CeilingFan ceilingFan) {
        this.ceilingFan = ceilingFan;
    }

    @Override
    public void execute() {
        prevSpeed = ceilingFan.getSpeed();
        ceilingFan.off();
    }

    @Override
    public void undo() {
        if (prevSpeed == 3) {
            ceilingFan.high();
        } else if (prevSpeed == 2) {
            ceilingFan.medium();
        } else if (prevSpeed == 1) {
            ceilingFan.low();
        } else if (prevSpeed == 0) {
            ceilingFan.off();
        }
    }
}

// Remote Control class
class RemoteControl {
    private Command slot;
    private Stack<Command> undoStack;

    public RemoteControl() {
        undoStack = new Stack<>();
    }

    public void setCommand(Command command) {
        slot = command;
    }

    public void pressButton() {
        slot.execute();
        undoStack.push(slot);
    }

    public void pressUndoButton() {
        if (!undoStack.isEmpty()) {
            Command lastCommand = undoStack.pop();
            lastCommand.undo();
        }
    }
}

// Client code to test the undo command for the ceiling fan
public class CeilingFanTest {
    public static void main(String[] args) {
        CeilingFan ceilingFan = new CeilingFan("Living Room");

        CeilingFanHighCommand highCommand = new CeilingFanHighCommand(ceilingFan);
        CeilingFanOffCommand offCommand = new CeilingFanOffCommand(ceilingFan);

        RemoteControl remote = new RemoteControl();

        remote.setCommand(highCommand);
        remote.pressButton(); // Turns on high
        remote.pressUndoButton(); // Undoes high

        remote.setCommand(offCommand);
        remote.pressButton(); // Turns off
        remote.pressUndoButton(); // Undoes off
    }
}



Q.2 Write a python program to implement logistic Regression for predicting whether a person will buy the insurance or not. Use insurance_data.csv. 
Ans==

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the data
df = pd.read_csv('insurance_data.csv')

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop('bought_insurance', axis=1), df['bought_insurance'], test_size=0.25, random_state=42)

# Create a logistic regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the accuracy
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy
print('Accuracy:', accuracy)
  
 
-----------------------------------------------------------------------------slip 23-----------------------------------------------------------------------



Q.1 Write a Java Program to implement Factory Design pattern for operating system example. 
Ans== 


  
package SADP;

public class FactoryDP {
    public static void main(String[] args) {
        OSFactory osf=new OSFactory();
        OS o=osf.getIns("Open");
        o.show();
        
    }
}

interface OS{
    void show();
}

class Android implements OS{
    public void show()
    {
        System.out.println(" I am Android");
    }
}
class Windows implements OS{
    public void show()
    {
        System.out.println(" I am Windows");
    }
}
class IOS implements OS{
    public void show()
    {
        System.out.println(" I am IOS");
    }
}

class OSFactory{
    public OS getIns(String str)
        {
            if(str.equalsIgnoreCase("Open"))
            {
                return new Android();
            }
            else{
                return new Windows();
            }
            
        }

}



Q.2 Write a python program to implement multiple Linear Regression for predicting house price.
Ans==

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the data
df = pd.read_csv('house_prices.csv')

# Split the data into training and testing sets
X = df[['square_feet', 'number_of_bedrooms', 'number_of_bathrooms']]
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

# Create the linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print('The mean squared error is:', model.score(X_test, y_test))


  
-----------------------------------------------------------------------------slip 24-----------------------------------------------------------------------


Q.1 Write a Java Program to implement Singleton pattern for multithreading
Ans ==

      public class Singleton {
    // Declare the volatile instance variable to ensure visibility across threads
    private static volatile Singleton instance;

    // Private constructor to prevent instantiation from other classes
    private Singleton() {
        // Initialize the instance as needed
    }

    // Double-Checked Locking to ensure only one instance is created
    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }

    // Add other methods or attributes as needed
    public void showMessage() {
        System.out.println("Hello from Singleton!");
    }

    public static void main(String[] args) {
        // Create multiple threads to access the Singleton
        Thread thread1 = new Thread(() -> {
            Singleton singleton = Singleton.getInstance();
            singleton.showMessage();
        });

        Thread thread2 = new Thread(() -> {
            Singleton singleton = Singleton.getInstance();
            singleton.showMessage();
        });

        // Start the threads
        thread1.start();
        thread2.start();
    }
}



Q.2 Write a python program to implement simple Linear Regression for predicting house price. 
Ans== 

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Sample data: House sizes (in square feet) and their corresponding prices
house_sizes = np.array([1400, 1600, 1700, 1875, 1100, 1550, 2350, 2450, 1425, 1700])
prices = np.array([245000, 312000, 279000, 308000, 199000, 219000, 405000, 324000, 319000, 255000])

# Reshape data for sklearn
house_sizes = house_sizes.reshape(-1, 1)

# Create and fit a Linear Regression model
model = LinearRegression()
model.fit(house_sizes, prices)

# Predict prices for new house sizes
new_sizes = np.array([1600, 1800, 2000, 2100]).reshape(-1, 1)
predicted_prices = model.predict(new_sizes)

# Plot the data and regression line
plt.scatter(house_sizes, prices, label='Data')
plt.plot(house_sizes, model.predict(house_sizes), color='red', label='Linear Regression')
plt.xlabel('House Size (sqft)')
plt.ylabel('Price ($)')
plt.legend()
plt.title('House Price Prediction')
plt.show()

# Display predicted prices for new house sizes
print("Predicted prices for new house sizes:")
for size, price in zip(new_sizes, predicted_prices):
    print(f"Size: {size[0]} sqft, Predicted Price: ${price:.2f}")

    

-----------------------------------------------------------------------------slip 25-----------------------------------------------------------------------

          
Q.1 Write a Java Program to implement Iterator Pattern for Designing Menu like Breakfast, Lunch or Dinner Menu. 
Ans== 

//package SADP.IteratorDP;

import java.text.BreakIterator;

interface Iterator{
    public boolean hasNext();
    public Object next();

}
 interface Menu{
    public Iterator getMenu();
 }

public class Breakfast implements Menu {
    public String names[]={"Vadapav", "Misal","Dosa"};
    
    public Iterator getMenu()
    {
        return new BreakfastIter();
    }
    
    private class BreakfastIter implements Iterator
    {
        int index;
        public boolean hasNext()
        {
            if(index<names.length)
            {
                return true;
            }
            return false;
        }

        public Object next()
        {
            if(this.hasNext())
            {
                return names[index++];

            }
            return null;
        }
    } 
}





Q.2 Write a python program to transform data with Principal Component Analysis (PCA). Consider handwritten digit dataset.
Ans ==

import numpy as np
from sklearn.decomposition import PCA

# Create a sample dataset
data = np.array([
    [1, 2, 3, 4, 5],
    [2, 3, 4, 5, 6],
    [3, 4, 5, 6, 7]
])

# Initialize a PCA transformer with the number of components you want
pca = PCA(n_components=2)

# Fit the transformer to the data and transform it
transformed_data = pca.fit_transform(data)

# Display the transformed data
print("Original Data:")
print(data)
print("\nTransformed Data (2 Principal Components):")
print(transformed_data)



--------------------------------------------------------------------------END---------------------------------------------------------------------------------------



     